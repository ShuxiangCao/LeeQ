from leeq.core.primitives.logical_primitives import LogicalPrimitiveBlock
from leeq.experiments.sweeper import Sweeper
from leeq.setups.setup_base import ExperimentalSetup


class QuTipQIPLocalSetup(ExperimentalSetup):
    """
    The QuTipQIPLocalSetup class defines a local setup for for using the qutip_qip package to simulate the experiment
    at pulse level, at the local machine.
    """

    def __init__(self):
        """
        Initialize the QuTipQIPLocalSetup class.
        """
        name = 'qutip_qip_local'
        from leeq.backend.qutip_qip.backend_qutip_qip import BackendQutipQIP
        from leeq.core.engine.grid_sweep_engine import GridSerialSweepEngine
        self._backend = BackendQutipQIP()
        self._engine = GridSerialSweepEngine(backend=self._backend, setup=self, name=name + '.engine')
        self._current_context = None
        super().__init__(name)

    def run(self, lpb: LogicalPrimitiveBlock, sweep: Sweeper):
        """
        Run the experiment.

        The experiment run iterates all the parameters described by the sweeper. Each iteration can be break into
         four steps:

        1. Compile the measurement lpb to instructions that going to be passed to the backend.
        2. Upload the instruction to the backend, including changing frequencies of the generators etc. Get everything
            ready for the experiment.
        3. Fire the experiment and wait for it to finish.
        4. Collect the data from the backend and commit it to the measurement primitives.

        So the setup should implement the following methods:
        2. `update_setup_parameters`: Update the setup parameters of the backend. Usually this function calculates
            the frequencies of the generators etc and pass it to specific experiment setup class to further upload.
        3. `fire_experiment`: Fire the experiment and wait for it to finish.
        4. `collect_data`: Collect the data from the backend and commit it to the measurement primitives.

        Note that the collected data will be committed to the measurement primitives by the engine, so the setup
            should not commit the data to the measurement primitives.

        The backend should mainly implement the compile_lpb, like compiling the lpb into a format acceptable by the
        particular setup. This abstraction is to allow the backend to be used in different setups. For example, the
        backend can be used in a local setup, or a remote setup.

        Parameters:
            lpb (LogicalPrimitiveBlock): The logical primitive block to run.
            sweep (Sweeper): The sweeper to use.
        """
        return self._engine.run(lpb, sweep)

    def update_setup_parameters(self, context):
        """
        Update the setup parameters of the backend. It accepts the compiled instructions from the backend, and update
        the local cache first. then use push_instrument_settings to push the settings to the instruments.

        Parameters:
            context (Any): The context between setup and backend. Generated by the backend.
        """
        self._current_context = context

    def fire_experiment(self, context=None):
        """
        Fire the experiment and wait for it to finish.
        """

        if context is not None:
            self._current_context = context

        # TODO: Actually run the simulation here

        pass

    def collect_data(self, context):
        """
        Collect the data from the backend and commit it to the measurement primitives.
        """

        if context is not None:
            self._current_context = context

        # TODO: actually collect the data here
